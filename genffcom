#!/bin/bash

# Usage info
show_help() {
cat << EOF
genffcom generates a bash script in the current directory
called ffcom containing an ffmpeg command that will record
a silent mkv video at a default rate of 8 frames per second.
Execute the generated script with 
\$ bash ffcom 
in a terminal, and exit by clicking the stop icon in the
notification area. Ignore instructions from ffmpeg about
stopping it with q - it won't work. If you don't have a
notification area, you can still stop it with ctrl-c in
the terminal where it is running.
   
Usage: genffcom [-h -a area -r rate#] {silentcast#}

    -h          display this help and exit
    -a area     area is one of the following letters:
                f t i e
		and have the following meanings:
		f : Fullscreen
		t : Transparent Window Interior
		i : Interior of a Window
		e : Entirety of a Window
		(default is Interior of a Window)
    -r rate#    set frames per second to rate#,
                a natural number
                (default is 8 frames per second)
    silentcast# is a single digit indicating how many
                instances of silentcast are running.
		silentcast limits it to 1 or 2, but
		can be set to anything or left blank
		if genffcom is called outside of silentcast

Spaces are not necessary in specifying the options: -atr12
would mean set area using Transparent Window Interior and
set frames per second to 12.

genffcom is normally called from silentcast, but
   can be called directly or from another script.
EOF
}

#defaults
py_script_dir=/usr/share/silentcast # if the python scripts are put somewhere else, change this, but the path must not have spaces
fps=8
fullscreen=false
entire=false
all_keys=""
transparentPID=0
resizeInstructions=""
nextInstructions=""
winSelect=":SELECT:"
win="next active"
extents=""
x=0
y=0
w=0
h=0
bl=0
br=0
bb=0
t=0

OPTIND=1
while getopts ":ha:r:" opt
do 
	echo $OPTARG # I don't know why I have to echo $OPTARG to get it assigned, but I do
	case $opt in
		h)
			show_help
			exit 0
			;;
		a)
			case $OPTARG in
				f)
					w=$(xrandr --current | grep '*' | uniq | awk '{print $1}' |  cut -d 'x' -f1)
					h=$(xrandr --current | grep '*' | uniq | awk '{print $1}' |  cut -d 'x' -f2 | cut -d '_' -f1)
					fullscreen=true
					;;
				t)
					all_keys=`xfconf-query -c xfce4-keyboard-shortcuts -lv`
					python "$py_script_dir"/transparent_window.py \""$all_keys"\" & transparentPID=$!
					sleep 0.2 # wmctrl doesn't work unless I sleep here
					wmctrl -r "Resize" -e 1,0,0,500,300 # move the transp win to top left so it's not hiding
					;;
				i)
					# don't need to do anything here
					;;
				e)
					entire=true
					;;
				[^ftie])
					echo "Invalid Area: -a$OPTARG  ('genffcom -h' for help)" >&2
					exit 1
					;;
			esac
			;;
		r)
			fps=$OPTARG 
			;;
		\?) 
			echo "Invalid option: -$OPTARG  ('genffcom -h' for help)" >&2
			exit 1
			;;
	       	:)
		       	echo "Option -$OPTARG requires an argument." >&2
		       	exit 1
		       	;;
       	esac
done
shift "$((OPTIND-1))" # get rid of everything just processed leaving silentcast# as $1

if [ "$fullscreen" = false ] # getting the size and position of area to record - don't need that if fullscreen=true
then
	if [ $transparentPID -eq 0 ] 
	then
		resizeInstructions="; then, click on a window <span color='red'>that is not maximized.</span>"
		nextInstructions="The next dialogue will give you a chance to get ready before recording begins."
	else
		winSelect=Resize
		win=transparent
		nextInstructions="The transparent window will close, but the recording area will be \
where the interior was. The next dialogue will give you a chance to get ready before \
recording begins."
	fi
	size_form=`yad --form --on-top --center --height="340" --title="Auto Resize" --window-icon="media-record" --separator=','\
	       	--text="<b>SILENTCAST $1                </b><span font='24' color='green'>3</span>\n\
Choose one of the window sizes below or enter one on the WxH choice and click OK$resizeInstructions\n\
	\n\
After auto-resizing (or not), the next dialogue will give you another chance to make manual adjustments."\
	       	--field="Window Size for recording":CBE \
		"No-auto-sizing"!"560x315"!"640x360"!"853x480"!"1280x720"!"WxH"`
	if [ "$?" -ne "0" ] #Cancel was clicked
	then
		if [ $transparentPID -ne 0 ] # Close the transparent window if it was used
		then
			kill $transparentPID
		fi
		exit 1 
	fi 

	size="$(awk -F, '{print $1}' <<<"$size_form")"

	if [ $size != No-auto-sizing ]
	then
		size=`echo $size | tr x ,` # change 1280x720 to 1280,720
		wmctrl -e 1,0,0,$size -r $winSelect
	fi

	printf "Move the $win window to the area to be recorded, and resize manually if desired.
       	
Click OK when you've got the $win window sized and positioned correctly. 
       	
$nextInstructions" \
| yad --text-info --on-top --center --width=440 --height=280 --wrap --title="Manual Resize \
and Position" --window-icon="media-record" --text="<b>SILENTCAST $1                </b><span font='24' color='green'>2</span>"
	if [ "$?" -ne "0" ] #Cancel was clicked
	then
		if [ $transparentPID -ne 0 ] # Close the transparent window if it was used
		then
			kill $transparentPID
		fi
		exit 1 
	fi

        sleep 0.2 # Just making sure the dialogue window isn't in the way
	aw=$(xdotool getactivewindow)
        eval $(xwininfo -id "$aw" |
          sed -n -e "s/^ \+Absolute upper-left X: \+\([0-9]\+\).*/x=\1/p" \
                 -e "s/^ \+Absolute upper-left Y: \+\([0-9]\+\).*/y=\1/p" \
                 -e "s/^ \+Width: \+\([0-9]\+\).*/w=\1/p" \
                 -e "s/^ \+Height: \+\([0-9]\+\).*/h=\1/p" )
	if [ "$entire" = true ]
	then
		extents=$(xprop _NET_FRAME_EXTENTS -id "$aw" | grep "NET_FRAME_EXTENTS" | cut -d '=' -f 2 | tr -d ' ')
		bl=$(echo $extents | cut -d ',' -f 1) # width of left border
		br=$(echo $extents | cut -d ',' -f 2) # width of right border
		t=$(echo $extents | cut -d ',' -f 3)  # height of title bar
		bb=$(echo $extents | cut -d ',' -f 4) # height of bottom border

		let x=$x-$bl
		let y=$y-$t
		let w=$w+$bl+$br
		let h=$h+$t+$bb
	fi
fi

if [ $transparentPID -ne 0 ] # Close the transparent window if it was used
then
	kill $transparentPID
fi

# Finally, make the ffcom bash file
echo '#!/bin/bash
# Output from genffcom for screencast#='$1'

printf "Click OK when ready to start recording.

To Stop Recording: 
Click the stop icon in the Notification Area" \
| yad ---text-info --on-top --center --width=440 --height=280 --wrap --title="Get Ready" --window-icon="media-record" --text="\
<b>SILENTCAST '$1'                </b><span font='"'"'24'"'"' color='"'"'green'"'"'>1</span>"
[ "$?" -ne "0" ] && exit 1 #Cancel was clicked

ffmpeg -f x11grab -s '$w'x'$h' -r '$fps' -i :0.0+'$x','$y' -c:v ffvhuff -an -y temp.mkv & ffmpegPID=$!
if [[ "$XDG_CURRENT_DESKTOP" == "Unity"  ]]; then
        echo "Unity detected, switching indicators..."
	python '$py_script_dir'/unity_indicator.py '$1'
else
    yad --notification --image="'$py_script_dir'/stop'$1'.png" --text="'$1'"
fi
kill $ffmpegPID' > ffcom

# End of file
